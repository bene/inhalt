---
import components from "../../sections.gen";
import { AddSectionTool } from "../components/sdk/AddSectionTool";
import { pageResponseValidator, pagesResponseValidator } from "../validation";

export async function getStaticPaths() {
  const res = await fetch("http://localhost:3000/pages");
  const raw = await res.json();
  const pages = pagesResponseValidator.parse(raw);

  const paths = pages.map((page) => ({
    params: { slug: page.slug },
  }));

  return paths;
}

const { slug } = Astro.params;

const res = await fetch(`http://localhost:3000/page/${slug ?? "index"}`);
const raw = await res.json();
const page = pageResponseValidator.parse(raw);

const isPreviewMode = import.meta.env.MODE === "development";
---

{
  page.sections.length >= 1 ? (
    page.sections.map((section, index) => {
      const Component =
        components[section.componentName as keyof typeof components];

      if (!Component) {
        return <p>Component not found: {section.componentName}</p>;
      }

      return (
        <Fragment>
          <Component {...(section.props as any)} />
          {isPreviewMode && (
            <AddSectionTool insertIndex={index + 1} client:only />
          )}
        </Fragment>
      );
    })
  ) : isPreviewMode ? (
    <AddSectionTool insertIndex={0} showAlways client:only />
  ) : null
}
