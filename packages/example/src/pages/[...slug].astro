---
import { pageValidator, pagesValidator } from "@inhalt/schema";
import components from "../../sections.gen";
import { AddSectionTool } from "../components/sdk/AddSectionTool";
import { SectionMarker } from "../components/sdk/SectionMarker";

export async function getStaticPaths() {
  const res = await fetch("http://localhost:3000/pages");
  const raw = await res.json();
  const pages = pagesValidator.parse(raw);

  const paths = pages.map((page) => ({
    params: { slug: page.slug === "index" ? "/" : page.slug },
  }));

  return paths;
}

const { slug } = Astro.params;

const res = await fetch(`http://localhost:3000/page/${slug ?? "index"}`);
const raw = await res.json();
const page = pageValidator.parse(raw);

const isPreviewMode = import.meta.env.MODE === "development";
---

<p class="hidden">Test</p>
{
  page.sections.length >= 1 ? (
    page.sections.map((section, index) => {
      const Component =
        components[section.componentName as keyof typeof components];

      if (!Component) {
        return <p>Component not found: {section.componentName}</p>;
      }

      return (
        <Fragment>
          <Component {...(section.props as any)} />

          {isPreviewMode && (
            <Fragment>
              <SectionMarker sectionId={section.id} />
              <AddSectionTool
                pageId={page.id}
                insertIndex={index + 1}
                client:only
              />
            </Fragment>
          )}
        </Fragment>
      );
    })
  ) : isPreviewMode ? (
    <AddSectionTool pageId={page.id} insertIndex={0} showAlways client:load />
  ) : null
}
